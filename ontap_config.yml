---
###############################################################################
# pb_ontap_config.yml
# Main playbook to do the base and svm configuration for an ontap cluster
# Version 1.0.0a
# Marc Ferber NetApp 2019 10 07
###############################################################################
- hosts: localhost
  gather_facts: no
  vars_prompt:
    - name: netapp_hostname
      prompt: Enter the NetApp cluster name
      private: no
    - name: netapp_username
      prompt: Enter the NetApp cluster account
      private: no
    - name: netapp_password
      prompt: Enter the NetApp cluster password
      no_log: true
  vars:
    input: &input
      hostname: "{{ netapp_hostname }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
  tasks:
    - name: Check for cluster varfiles
      find:
         paths: "/home/ansible/ontap95p6/ansible-data/varfiles/{{ hostname }}"
         patterns: "var_{{ hostname }}*.yml"
      register: reg_cluster_varfiles_list
    - set_fact:
         cluster_varfiles_list: "{{ reg_cluster_varfiles_list.files|map(attribute='path')|sort }}"
    - set_fact:
        clustervarfile: "{{ checknewinstall }}"
      vars:
        checknewinstall: "/usr/local/ansible-data/varfiles/{{ hostname }}/var_{{ hostname }}.yml"
      when: 
        - cluster_varfiles_list|length == 1
        - cluster_varfiles_list[0] == checknewinstall
    - block:
       - pause:
           prompt: "Please Enter the JIRA ticket number for this expansion"
         register: reg_jira_ticket
       - set_fact:
           tmp_cluvarfile: "/usr/local/ansible-data/varfiles/{{ hostname }}/var_{{ hostname }}_{{ reg_jira_ticket.user_input }}.yml"
       - set_fact:
           clustervarfile: "{{ tmp_cluvarfile }}"
         when:
           - tmp_cluvarfile in cluster_varfiles_list
      when:
        - not clustervarfile is defined
    - fail:
        msg: "No varfile associated with the cluster {{ hostname }} were found. Check The JIRA ticket number again"
      when:
        - not clustervarfile is defined
    - name: Check if var_[cluster].yml exists
      stat:
         path: "{{ clustervarfile }}"
      register: cluvarstat_result
    - fail:
       msg: "File {{ clustervarfile }} not found !   Has the file been generated by the pb_new_cluster_deployement.yml playbook ?   Validate your input and relaunch the playbook"
      when: cluvarstat_result.stat.exists == false
    - name: Check if var_softlayer.yml exists
      stat:
         path: "{{ './varfiles/var_softlayer.yml' }}"
      register: stat_result
    - name: Load softlayer specific var files
      include_vars:
        file: "{{ './varfiles/var_softlayer.yml' }}"
      when: stat_result.stat.exists
    - name: Extract datacenter from netapp_hostname for specific case (ending with -fc or -ff)
      set_fact:
        datacenter: "{{ netapp_hostname[:-3][-7:][0:5] | lower }}"
      when:
        - netapp_hostname is regex("-[a-zA-Z][a-zA-Z]$")
    - name: Extract datacenter from netapp_hostname for regular case
      set_fact:
        datacenter: "{{ netapp_hostname[-7:][0:5] | lower }}"
      when:
        - not netapp_hostname is regex("-[a-zA-Z][a-zA-Z]$")
    - name: Check if var_[datacenter].yml exists
      stat:
         path: "{{ './varfiles/var_' + datacenter + '.yml' }}"
      register: stat_result
    - name: Loading variable for datacenter if it exist
      include_vars:
        file: "{{ './varfiles/var_' + datacenter + '.yml' }}"
      when: stat_result.stat.exists
    - name: Extract environment from netapp_hostname
      set_fact:
        envshort: "{{ netapp_hostname[0:4] }}"
      when:
        - not envshort is defined
    - name: Check if var_[environment].yml exists
      stat:
         path: "{{ './varfiles/var_' + envshort + '.yml' }}"
      register: stat_result
    - name: Loading variable for environment if it exist
      include_vars:
        file: "{{ './varfiles/var_' + envshort + '.yml' }}"
      when: stat_result.stat.exists
    - name: Get Ontap facts
      na_ontap_info:
        state: info
        <<: *input
        https: true
        ontapi: 32
        validate_certs: false
        gather_subset:
          - "!volume_info"
          - "!lun_info"
      register: ontap_info
    - set_fact:
        ontap_facts: "{{ ontap_info.ontap_info }}"
    #- name: Get Ontapi version
    #  na_ontap_gather_facts:
    #    state: info
    #    <<: *input
    #    https: true
    #    ontapi: 32
    #    validate_certs: false
    - name: Create list of unique node model
      set_fact:
         uniq_node_model: "{{ uniq_node_model |default([]) + [ { 'model' : model} ] }}"
      with_items: "{{ ontap_facts.system_node_info }}"
      vars:
        model: "{{ ontap_facts.system_node_info[item].node_model }}"
    - name: Check if var_[node_model].yml exists
      stat:
         path: "{{ './varfiles/var_platform_' + item.model + '.yml' }}"
      register: stat_result
      with_items: "{{ uniq_node_model | unique }}"
    - name: Load node model specific var files
      include_vars:
        file: "{{ item.invocation.module_args.path }}"
      with_items: "{{ stat_result.results }}"
      when: item.stat.exists
    - name: Check if var_Global_DNS.yml.com exists
      stat:
         path: "{{ './group_vars/var_Global_DNS.yml.com' }}"
      register: stat_result
    - name: Load dns var files if it exist
      include_vars:
        file: "{{ './group_vars/var_Global_DNS.yml.com' }}"
      when: stat_result.stat.exists
    - name: Load cluster specific var files
      include_vars:
        file: "{{ clustervarfile }}"
      when: cluvarstat_result.stat.exists
    #- import_role:
    #    name: na_ontap_config_precheck
    #  vars:
    #    <<: *input
    - debug:
        msg:
          - "-------------------------------------------------------"
          - "                                                       "
          - " Cluster {{hostname }} is about to be configured        "
          - "                                                       "
          - "-------------------------------------------------------"
    - pause:
    - import_role:
        name: na_ontap_cluster_base_config
      vars:
        <<: *input
    - import_role:
        name: na_ontap_cluster_advanced_config
      vars:
        <<: *input
      when: stat_result.stat.exists
